# Generated by Django 5.2.4 on 2025-07-28 14:15

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="MemberState",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "country_code",
                    models.CharField(
                        help_text="ISO 3166-1 alpha-2 country code (e.g., 'DE', 'FR', 'IT')",
                        max_length=2,
                        unique=True,
                    ),
                ),
                (
                    "country_name",
                    models.CharField(
                        help_text="Full country name (e.g., 'Germany', 'France', 'Italy')",
                        max_length=100,
                    ),
                ),
                (
                    "language_code",
                    models.CharField(
                        help_text="ISO 639 language code (e.g., 'de-DE', 'fr-FR', 'it-IT')",
                        max_length=10,
                    ),
                ),
                (
                    "ncp_endpoint",
                    models.URLField(help_text="National Contact Point endpoint URL"),
                ),
                (
                    "home_community_id",
                    models.CharField(
                        help_text="OID for the home community identifier",
                        max_length=100,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Member State",
                "verbose_name_plural": "Member States",
                "ordering": ["country_name"],
            },
        ),
        migrations.CreateModel(
            name="AvailableService",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "service_type",
                    models.CharField(
                        choices=[
                            ("PS", "Patient Summary"),
                            ("EP", "ePrescription"),
                            ("ED", "eDispensation"),
                            ("LR", "Laboratory Results"),
                            ("MR", "Medical Reports"),
                            ("DI", "Diagnostic Images"),
                            ("VR", "Vaccination Records"),
                        ],
                        max_length=2,
                    ),
                ),
                ("service_name", models.CharField(max_length=200)),
                ("service_description", models.TextField(blank=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "member_state",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="available_services",
                        to="patient_data.memberstate",
                    ),
                ),
            ],
            options={
                "verbose_name": "Available Service",
                "verbose_name_plural": "Available Services",
                "unique_together": {("member_state", "service_type")},
            },
        ),
        migrations.CreateModel(
            name="PatientIdentifier",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "patient_id",
                    models.CharField(
                        help_text="Patient ID in the home member state", max_length=100
                    ),
                ),
                (
                    "id_extension",
                    models.CharField(
                        blank=True,
                        help_text="Extension part of the patient ID",
                        max_length=100,
                    ),
                ),
                (
                    "id_root",
                    models.CharField(
                        help_text="Root OID for the patient ID", max_length=100
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "home_member_state",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="patient_identifiers",
                        to="patient_data.memberstate",
                    ),
                ),
            ],
            options={
                "verbose_name": "Patient Identifier",
                "verbose_name_plural": "Patient Identifiers",
                "unique_together": {("patient_id", "home_member_state", "id_root")},
            },
        ),
        migrations.CreateModel(
            name="PatientData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("given_name", models.CharField(blank=True, max_length=100)),
                ("family_name", models.CharField(blank=True, max_length=100)),
                ("birth_date", models.DateField(blank=True, null=True)),
                (
                    "gender",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("M", "Male"),
                            ("F", "Female"),
                            ("O", "Other"),
                            ("U", "Unknown"),
                        ],
                        max_length=1,
                    ),
                ),
                ("address_line", models.TextField(blank=True)),
                ("city", models.CharField(blank=True, max_length=100)),
                ("postal_code", models.CharField(blank=True, max_length=20)),
                ("country", models.CharField(blank=True, max_length=100)),
                ("consent_given", models.BooleanField(default=False)),
                ("consent_timestamp", models.DateTimeField(blank=True, null=True)),
                (
                    "break_glass_access",
                    models.BooleanField(
                        default=False,
                        help_text="Emergency access without patient consent",
                    ),
                ),
                (
                    "break_glass_reason",
                    models.TextField(
                        blank=True, help_text="Reason for emergency access"
                    ),
                ),
                ("break_glass_timestamp", models.DateTimeField(blank=True, null=True)),
                ("access_timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "raw_patient_summary",
                    models.TextField(
                        blank=True, help_text="Raw XML patient summary from source NCP"
                    ),
                ),
                (
                    "raw_eprescription",
                    models.TextField(
                        blank=True,
                        help_text="Raw XML ePrescription data from source NCP",
                    ),
                ),
                (
                    "accessed_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="accessed_patient_data",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "break_glass_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="break_glass_accesses",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "consent_given_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="patient_consents_given",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "patient_identifier",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="patient_data_records",
                        to="patient_data.patientidentifier",
                    ),
                ),
            ],
            options={
                "verbose_name": "Patient Data",
                "verbose_name_plural": "Patient Data Records",
                "ordering": ["-access_timestamp"],
            },
        ),
        migrations.CreateModel(
            name="PatientServiceRequest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("request_id", models.UUIDField(default=uuid.uuid4, unique=True)),
                ("request_timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("PROCESSING", "Processing"),
                            ("COMPLETED", "Completed"),
                            ("FAILED", "Failed"),
                            ("CANCELLED", "Cancelled"),
                        ],
                        default="PENDING",
                        max_length=20,
                    ),
                ),
                ("consent_required", models.BooleanField(default=True)),
                ("consent_obtained", models.BooleanField(default=False)),
                (
                    "consent_method",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("EXPLICIT", "Explicit Consent"),
                            ("BREAK_GLASS", "Break Glass"),
                            ("PRESUMED", "Presumed Consent"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "response_data",
                    models.TextField(
                        blank=True, help_text="Raw response data from the service"
                    ),
                ),
                ("response_timestamp", models.DateTimeField(blank=True, null=True)),
                ("error_message", models.TextField(blank=True)),
                (
                    "patient_identifier",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="service_requests",
                        to="patient_data.patientidentifier",
                    ),
                ),
                (
                    "requested_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="patient_service_requests",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "requested_service",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="service_requests",
                        to="patient_data.availableservice",
                    ),
                ),
            ],
            options={
                "verbose_name": "Patient Service Request",
                "verbose_name_plural": "Patient Service Requests",
                "ordering": ["-request_timestamp"],
            },
        ),
    ]
