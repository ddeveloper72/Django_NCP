# Generated by Django 5.2.4 on 2025-07-28 22:07

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("translation_manager", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="MVCSyncLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sync_type",
                    models.CharField(
                        choices=[
                            ("full_sync", "Full Synchronization"),
                            ("incremental", "Incremental Sync"),
                            ("single_vs", "Single Value Set"),
                            ("error_recovery", "Error Recovery"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        choices=[
                            ("cts_training", "CTS Training"),
                            ("cts_acceptance", "CTS Acceptance"),
                            ("cts_production", "CTS Production"),
                            ("local_file", "Local File Import"),
                            ("manual", "Manual Entry"),
                        ],
                        max_length=50,
                    ),
                ),
                ("started_at", models.DateTimeField()),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("value_sets_processed", models.IntegerField(default=0)),
                ("value_sets_created", models.IntegerField(default=0)),
                ("value_sets_updated", models.IntegerField(default=0)),
                ("concepts_processed", models.IntegerField(default=0)),
                ("translations_processed", models.IntegerField(default=0)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("running", "Running"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("partial", "Partially Completed"),
                        ],
                        max_length=20,
                    ),
                ),
                ("error_message", models.TextField(blank=True)),
                ("sync_details", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MVC Sync Log",
                "verbose_name_plural": "MVC Sync Logs",
                "indexes": [
                    models.Index(
                        fields=["started_at", "status"],
                        name="translation_started_0b787a_idx",
                    ),
                    models.Index(
                        fields=["source", "sync_type"],
                        name="translation_source_18eb12_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="ValueSetCatalogue",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "oid",
                    models.CharField(
                        help_text="Object Identifier (OID) for the value set",
                        max_length=255,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[\\d\\.]+$", "OID must contain only digits and dots"
                            )
                        ],
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Human-readable name of the value set", max_length=500
                    ),
                ),
                (
                    "display_name",
                    models.CharField(
                        blank=True,
                        help_text="Display name for UI purposes",
                        max_length=500,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed description of the value set purpose and content",
                    ),
                ),
                (
                    "version",
                    models.CharField(
                        default="1.0",
                        help_text="Version number of the value set",
                        max_length=50,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("active", "Active"),
                            ("retired", "Retired"),
                            ("unknown", "Unknown"),
                        ],
                        default="active",
                        max_length=20,
                    ),
                ),
                (
                    "effective_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date when this value set becomes effective",
                        null=True,
                    ),
                ),
                (
                    "expiration_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date when this value set expires",
                        null=True,
                    ),
                ),
                (
                    "binding_strength",
                    models.CharField(
                        choices=[
                            ("required", "Required"),
                            ("extensible", "Extensible"),
                            ("preferred", "Preferred"),
                            ("example", "Example"),
                        ],
                        default="required",
                        help_text="Strength of binding for this value set",
                        max_length=20,
                    ),
                ),
                (
                    "purpose",
                    models.TextField(
                        blank=True,
                        help_text="Purpose of this value set in clinical context",
                    ),
                ),
                (
                    "use_context",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Clinical contexts where this value set applies",
                    ),
                ),
                (
                    "immutable",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this value set definition is immutable",
                    ),
                ),
                (
                    "experimental",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this value set is experimental",
                    ),
                ),
                (
                    "publisher",
                    models.CharField(
                        blank=True,
                        help_text="Organization responsible for this value set",
                        max_length=255,
                    ),
                ),
                (
                    "contact_info",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Contact information for the publisher",
                    ),
                ),
                (
                    "copyright",
                    models.TextField(
                        blank=True, help_text="Copyright and usage restrictions"
                    ),
                ),
                (
                    "cts_url",
                    models.URLField(
                        blank=True, help_text="URL to this value set in CTS"
                    ),
                ),
                (
                    "last_updated_from_cts",
                    models.DateTimeField(
                        blank=True,
                        help_text="Last time this was synchronized with CTS",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "is_local_only",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this value set exists only locally",
                    ),
                ),
                (
                    "sync_enabled",
                    models.BooleanField(
                        default=True,
                        help_text="Whether to sync this value set with CTS",
                    ),
                ),
                (
                    "terminology_system",
                    models.ForeignKey(
                        help_text="Associated terminology system",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="value_sets",
                        to="translation_manager.terminologysystem",
                    ),
                ),
            ],
            options={
                "verbose_name": "Value Set Catalogue Entry",
                "verbose_name_plural": "Value Set Catalogue Entries",
            },
        ),
        migrations.CreateModel(
            name="ValueSetConcept",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "code",
                    models.CharField(help_text="Code for this concept", max_length=255),
                ),
                (
                    "display",
                    models.CharField(
                        help_text="Human-readable display text", max_length=500
                    ),
                ),
                (
                    "definition",
                    models.TextField(
                        blank=True, help_text="Formal definition of this concept"
                    ),
                ),
                (
                    "code_system",
                    models.CharField(
                        help_text="URI of the code system this concept comes from",
                        max_length=255,
                    ),
                ),
                (
                    "code_system_version",
                    models.CharField(
                        blank=True,
                        help_text="Version of the code system",
                        max_length=50,
                    ),
                ),
                (
                    "properties",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional properties for this concept",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("inactive", "Inactive"),
                            ("deprecated", "Deprecated"),
                        ],
                        default="active",
                        max_length=20,
                    ),
                ),
                ("effective_date", models.DateTimeField(blank=True, null=True)),
                (
                    "sort_order",
                    models.IntegerField(
                        default=0, help_text="Order for displaying this concept"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "parent_concept",
                    models.ForeignKey(
                        blank=True,
                        help_text="Parent concept for hierarchical value sets",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="child_concepts",
                        to="translation_services.valuesetconcept",
                    ),
                ),
                (
                    "value_set",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="concepts",
                        to="translation_services.valuesetcatalogue",
                    ),
                ),
            ],
            options={
                "verbose_name": "Value Set Concept",
                "verbose_name_plural": "Value Set Concepts",
            },
        ),
        migrations.CreateModel(
            name="ConceptTranslation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "language_code",
                    models.CharField(help_text="ISO language code", max_length=10),
                ),
                (
                    "translated_display",
                    models.CharField(
                        help_text="Translated display text for the concept",
                        max_length=500,
                    ),
                ),
                (
                    "translated_definition",
                    models.TextField(blank=True, help_text="Translated definition"),
                ),
                (
                    "translation_quality",
                    models.CharField(
                        choices=[
                            ("official", "Official Translation"),
                            ("professional", "Professional Translation"),
                            ("community", "Community Translation"),
                            ("machine", "Machine Translation"),
                        ],
                        default="official",
                        max_length=20,
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        default="CTS",
                        help_text="Source of this translation",
                        max_length=100,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "concept",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="translations",
                        to="translation_services.valuesetconcept",
                    ),
                ),
            ],
            options={
                "verbose_name": "Concept Translation",
                "verbose_name_plural": "Concept Translations",
            },
        ),
        migrations.CreateModel(
            name="ValueSetTranslation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "language_code",
                    models.CharField(
                        help_text="ISO language code (e.g., 'en', 'fr', 'de')",
                        max_length=10,
                    ),
                ),
                (
                    "translated_name",
                    models.CharField(
                        help_text="Translated name of the value set", max_length=500
                    ),
                ),
                (
                    "translated_description",
                    models.TextField(blank=True, help_text="Translated description"),
                ),
                (
                    "translation_quality",
                    models.CharField(
                        choices=[
                            ("official", "Official Translation"),
                            ("professional", "Professional Translation"),
                            ("community", "Community Translation"),
                            ("machine", "Machine Translation"),
                        ],
                        default="official",
                        max_length=20,
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        default="CTS",
                        help_text="Source of this translation",
                        max_length=100,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "value_set",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="translations",
                        to="translation_services.valuesetcatalogue",
                    ),
                ),
            ],
            options={
                "verbose_name": "Value Set Translation",
                "verbose_name_plural": "Value Set Translations",
            },
        ),
        migrations.AddIndex(
            model_name="valuesetcatalogue",
            index=models.Index(fields=["oid"], name="translation_oid_889bf5_idx"),
        ),
        migrations.AddIndex(
            model_name="valuesetcatalogue",
            index=models.Index(
                fields=["status", "effective_date"],
                name="translation_status_8cdd47_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="valuesetcatalogue",
            index=models.Index(
                fields=["terminology_system", "status"],
                name="translation_termino_22854d_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="valuesetconcept",
            index=models.Index(
                fields=["value_set", "code"], name="translation_value_s_888211_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="valuesetconcept",
            index=models.Index(
                fields=["code_system", "code"], name="translation_code_sy_a1f604_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="valuesetconcept",
            index=models.Index(
                fields=["status", "effective_date"],
                name="translation_status_b91d3e_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="valuesetconcept",
            unique_together={("value_set", "code", "code_system")},
        ),
        migrations.AlterUniqueTogether(
            name="concepttranslation",
            unique_together={("concept", "language_code")},
        ),
        migrations.AlterUniqueTogether(
            name="valuesettranslation",
            unique_together={("value_set", "language_code")},
        ),
    ]
