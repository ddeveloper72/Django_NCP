#!/usr/bin/env python3
"""
Backtrack Cyprus Data from UI to Source

Starting from the UI display, trace exactly where the Cyprus organization
with URN 'urn:uuid:f6680813-c583-4248-b29a-7096c7e6638d' is coming from.
"""

import os
import django
import sys
import requests
import json

# Add the project directory to Python path
sys.path.append('.')

# Configure Django settings
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'eu_ncp_server.settings')
django.setup()

def backtrack_cyprus_data():
    """
    Backtrack from UI to find source of Cyprus organization
    """
    print("üîç BACKTRACKING CYPRUS DATA FROM UI TO SOURCE")
    print("=" * 70)
    
    patient_id = "66b404e7-6769-41f3-be7a-a5253d0f1afd"
    cyprus_urn = "urn:uuid:f6680813-c583-4248-b29a-7096c7e6638d"
    
    print(f"üéØ Patient ID: {patient_id}")
    print(f"üîç Cyprus URN: {cyprus_urn}")
    
    # Step 1: Check what HAPI server returns for this patient RIGHT NOW
    print(f"\nüìã 1. CHECKING LIVE HAPI SERVER DATA")
    print(f"-" * 50)
    
    base_url = "https://hapi.fhir.org/baseR4"
    
    # Get the patient summary bundle (what Django fetches)
    bundle_url = f"{base_url}/Patient/{patient_id}/$everything"
    try:
        response = requests.get(bundle_url)
        if response.status_code == 200:
            bundle = response.json()
            print(f"‚úÖ Patient Summary Bundle retrieved")
            print(f"   Entries: {len(bundle.get('entry', []))}")
            
            # Search for the Cyprus URN specifically
            found_cyprus_urn = False
            for entry in bundle.get('entry', []):
                resource = entry.get('resource', {})
                entry_url = entry.get('fullUrl', '')
                
                # Check if this is our Cyprus organization
                if cyprus_urn in entry_url:
                    found_cyprus_urn = True
                    print(f"\nüö® FOUND CYPRUS URN IN HAPI SERVER!")
                    print(f"   Full URL: {entry_url}")
                    print(f"   Resource Type: {resource.get('resourceType')}")
                    
                    if resource.get('resourceType') == 'Organization':
                        print(f"   Organization: {resource.get('name')}")
                        print(f"   Address: {resource.get('address', [])}")
                    
                    print(f"   Full Resource:")
                    print(json.dumps(resource, indent=4))
                
                # Also check for any Cyprus-related content
                resource_str = json.dumps(resource)
                if any(term in resource_str.lower() for term in ['cyprus', 'nicosia', 'ehealthlab']):
                    print(f"\nüö® Cyprus content in {resource.get('resourceType')}/{resource.get('id', 'unknown')}")
                    if 'cyprus' in resource_str.lower():
                        print(f"   Contains 'cyprus'")
                    if 'nicosia' in resource_str.lower():
                        print(f"   Contains 'nicosia'")
                    if 'ehealthlab' in resource_str.lower():
                        print(f"   Contains 'ehealthlab'")
            
            if not found_cyprus_urn:
                print(f"‚ùå Cyprus URN NOT found in HAPI server data")
                print(f"üí° This means the URN is being generated by Django!")
        
    except Exception as e:
        print(f"‚ùå Error fetching HAPI data: {str(e)}")
    
    # Step 2: Test Django FHIR search service directly
    print(f"\nüìã 2. TESTING DJANGO FHIR SEARCH SERVICE")
    print(f"-" * 50)
    
    try:
        from patient_data.services.patient_search_service import EUPatientSearchService, PatientCredentials
        
        search_service = EUPatientSearchService()
        credentials = PatientCredentials(country_code="IE", patient_id=patient_id)
        
        matches = search_service.search_patient(credentials, use_local_cda=False, use_hapi_fhir=True)
        
        if matches:
            match = matches[0]
            print(f"‚úÖ Django search found: {match.given_name} {match.family_name}")
            
            # Check the FHIR bundle in the match
            if match.patient_data and 'fhir_bundle' in match.patient_data:
                bundle = match.patient_data['fhir_bundle']
                print(f"   Bundle entries: {len(bundle.get('entry', []))}")
                
                # Search for Cyprus URN in Django's bundle
                found_in_django = False
                for entry in bundle.get('entry', []):
                    entry_url = entry.get('fullUrl', '')
                    resource = entry.get('resource', {})
                    
                    if cyprus_urn in entry_url:
                        found_in_django = True
                        print(f"\nüö® FOUND CYPRUS URN IN DJANGO BUNDLE!")
                        print(f"   Django generated this URN!")
                        print(f"   Resource: {resource}")
                
                if not found_in_django:
                    print(f"‚ùå Cyprus URN not in Django FHIR bundle")
        
    except Exception as e:
        print(f"‚ùå Django search error: {str(e)}")
    
    # Step 3: Check FHIR Bundle Parser
    print(f"\nüìã 3. TESTING FHIR BUNDLE PARSER")
    print(f"-" * 50)
    
    try:
        from patient_data.services.fhir_bundle_parser import FHIRBundleParser
        from eu_ncp_server.services.fhir_integration import hapi_fhir_service
        
        # Get fresh bundle from HAPI
        ps_bundle = hapi_fhir_service.get_patient_summary(patient_id, "debug_test")
        
        if ps_bundle:
            print(f"‚úÖ Got Patient Summary Bundle from HAPI")
            
            # Parse it with Django's parser
            parser = FHIRBundleParser()
            parsed_data = parser.parse_patient_summary_bundle(ps_bundle)
            
            if parsed_data:
                print(f"‚úÖ Bundle parsed successfully")
                
                # Check extended data for organizations
                if 'extended_data' in parsed_data and 'healthcare_data' in parsed_data['extended_data']:
                    healthcare_data = parsed_data['extended_data']['healthcare_data']
                    
                    if 'organizations' in healthcare_data:
                        orgs = healthcare_data['organizations']
                        print(f"   Organizations found: {len(orgs)}")
                        
                        for i, org in enumerate(orgs):
                            org_name = org.get('name', 'Unknown')
                            org_id = org.get('id', 'Unknown')
                            
                            print(f"   {i+1}. {org_name} (ID: {org_id})")
                            
                            # Check if this org has Cyprus data
                            if any(term in str(org).lower() for term in ['cyprus', 'nicosia', 'ehealthlab']):
                                print(f"      üö® CYPRUS DATA IN PARSED ORGANIZATION!")
                                print(f"      Full org data: {org}")
                                
                                # Check if this org has our URN
                                if cyprus_urn in str(org):
                                    print(f"      üéØ THIS ORG HAS OUR CYPRUS URN!")
    
    except Exception as e:
        print(f"‚ùå Parser test error: {str(e)}")
    
    # Step 4: Check template rendering
    print(f"\nüìã 4. CHECKING TEMPLATE RENDERING")
    print(f"-" * 50)
    
    # Look for the template that displays healthcare organization
    template_file = "templates/patient_data/components/extended_patient_healthcare_clean.html"
    
    try:
        with open(template_file, 'r', encoding='utf-8') as f:
            template_content = f.read()
        
        # Check for organization rendering logic
        if 'organization' in template_content.lower():
            print(f"‚úÖ Found organization rendering in template")
            
            # Look for specific template variables
            org_patterns = [
                'organization.name',
                'org.name', 
                'healthcare_org',
                'provider_org'
            ]
            
            for pattern in org_patterns:
                if pattern in template_content:
                    print(f"   Template uses: {pattern}")
        
        # Check for hardcoded Cyprus data in template
        if any(term in template_content.lower() for term in ['cyprus', 'nicosia', 'ehealthlab']):
            print(f"üö® HARDCODED CYPRUS DATA IN TEMPLATE!")
            lines = template_content.split('\n')
            for i, line in enumerate(lines, 1):
                if any(term in line.lower() for term in ['cyprus', 'nicosia', 'ehealthlab']):
                    print(f"   Line {i}: {line.strip()}")
        else:
            print(f"‚úÖ No hardcoded Cyprus data in template")
    
    except Exception as e:
        print(f"‚ùå Template check error: {str(e)}")

def check_specific_urn_generation():
    """
    Check where URNs are generated in the codebase
    """
    print(f"\nüìã 5. CHECKING URN GENERATION IN CODEBASE")
    print(f"-" * 50)
    
    cyprus_urn = "urn:uuid:f6680813-c583-4248-b29a-7096c7e6638d"
    
    # Search for URN generation patterns
    import subprocess
    
    try:
        # Search for uuid generation
        result = subprocess.run(['grep', '-r', 'urn:uuid:', '.'], capture_output=True, text=True, cwd='.')
        if result.stdout:
            print(f"‚úÖ Found URN generation patterns:")
            lines = result.stdout.split('\n')[:10]  # Show first 10 matches
            for line in lines:
                if line.strip():
                    print(f"   {line}")
        
        # Search for the specific Cyprus URN
        result = subprocess.run(['grep', '-r', 'f6680813-c583-4248-b29a-7096c7e6638d', '.'], capture_output=True, text=True, cwd='.')
        if result.stdout:
            print(f"\nüö® FOUND SPECIFIC CYPRUS URN IN CODE!")
            lines = result.stdout.split('\n')
            for line in lines:
                if line.strip():
                    print(f"   {line}")
        else:
            print(f"\n‚úÖ Cyprus URN not hardcoded in codebase")
    
    except Exception as e:
        print(f"‚ùå URN search error: {str(e)}")

if __name__ == "__main__":
    backtrack_cyprus_data()
    check_specific_urn_generation()
    
    print(f"\nüí° ANALYSIS SUMMARY:")
    print(f"   If Cyprus URN found in HAPI server ‚Üí Server contamination")
    print(f"   If Cyprus URN only in Django ‚Üí Django generation issue")
    print(f"   If Cyprus URN hardcoded ‚Üí Remove hardcoded data")
    print(f"   If Cyprus URN in template ‚Üí Template contamination")
    
    print(f"\nüéØ NEXT STEPS:")
    print(f"   1. Identify exact source of Cyprus organization")
    print(f"   2. Remove/fix contaminated source")
    print(f"   3. Test with fresh session")
    print(f"   4. Verify Irish data appears correctly")