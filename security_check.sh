#!/bin/bash
#
# Pre-Deployment Security Check Script
# Run this before pushing to GitHub or deploying to production
#

echo "üîí EU eHealth NCP Server - Security Check"
echo "=========================================="

# Check for sensitive files
echo "üìÅ Checking for sensitive files..."
SENSITIVE_FILES=$(find . -name "*.pem" -o -name "*.key" -o -name "*.p12" -o -name ".env" -not -path "./.env.example" -not -path "./.env.secure.example")
if [ -n "$SENSITIVE_FILES" ]; then
    echo "‚ùå WARNING: Sensitive files found:"
    echo "$SENSITIVE_FILES"
    echo "   These files should NOT be committed to version control!"
else
    echo "‚úÖ No sensitive certificate or key files found"
fi

# Check for hardcoded secrets
echo ""
echo "üîç Scanning for potential secrets in code..."
SECRET_PATTERNS="password|secret|key|token|api_key"
SECRETS_FOUND=$(git log --all -p | grep -iE "$SECRET_PATTERNS" | grep -v "SECRET_KEY.*=.*os.getenv" | grep -v "example" | grep -v "placeholder" | head -5)
if [ -n "$SECRETS_FOUND" ]; then
    echo "‚ö†Ô∏è  Potential secrets found in git history:"
    echo "$SECRETS_FOUND"
    echo "   Review these matches to ensure no real secrets are committed"
else
    echo "‚úÖ No obvious secrets found in git history"
fi

# Check environment configuration
echo ""
echo "üåç Checking environment configuration..."
if [ -f ".env" ]; then
    echo "‚ùå WARNING: .env file exists and may contain secrets"
    echo "   Ensure .env is in .gitignore and contains no production secrets"
else
    echo "‚úÖ No .env file found in repository"
fi

if [ -f ".env.secure.example" ]; then
    echo "‚úÖ Secure environment template found"
else
    echo "‚ö†Ô∏è  No environment template found"
fi

# Check Django settings
echo ""
echo "‚öôÔ∏è  Checking Django configuration..."
if grep -q "DEBUG.*=.*True" eu_ncp_server/settings.py; then
    echo "‚ö†Ô∏è  DEBUG=True found in settings.py - ensure this uses environment variables"
else
    echo "‚úÖ No hardcoded DEBUG=True found"
fi

if grep -q "SECRET_KEY.*=.*django-insecure" eu_ncp_server/settings.py; then
    echo "‚ùå WARNING: Default Django secret key found - this MUST be changed for production"
else
    echo "‚úÖ No default secret key found"
fi

# Check gitignore
echo ""
echo "üö´ Checking .gitignore coverage..."
GITIGNORE_CHECKS=(".env" "*.pem" "*.key" "certificates/" "db.sqlite3")
for pattern in "${GITIGNORE_CHECKS[@]}"; do
    if grep -q "$pattern" .gitignore; then
        echo "‚úÖ $pattern is ignored"
    else
        echo "‚ö†Ô∏è  $pattern not found in .gitignore"
    fi
done

# Summary
echo ""
echo "üìã Security Check Summary"
echo "========================"
echo "Before pushing to GitHub:"
echo "1. ‚úÖ Review all warnings above"
echo "2. ‚úÖ Ensure no real certificates in repository"
echo "3. ‚úÖ Verify environment variables are secure"
echo "4. ‚úÖ Test with production-like settings"
echo "5. ‚úÖ Update documentation if needed"
echo ""
echo "üöÄ If all checks pass, you're ready to push to GitHub!"
echo ""
echo "Deployment checklist:"
echo "‚Ä¢ Set DEBUG=False in production"
echo "‚Ä¢ Use strong SECRET_KEY"
echo "‚Ä¢ Configure proper ALLOWED_HOSTS"
echo "‚Ä¢ Set up SSL certificates"
echo "‚Ä¢ Enable audit logging"
echo "‚Ä¢ Monitor security events"
